# Autogenerated wrapper script for Qt_jll for armv7l-linux-gnueabihf-cxx03
export libqt53danimation, libqt53dcore, libqt53dextras, libqt53dinput, libqt53dlogic, libqt53dquick, libqt53dquickanimation, libqt53dquickextras, libqt53dquickinput, libqt53dquickrender, libqt53dquickscene2d, libqt53drender, libqt5bodymovin, libqt5charts, libqt5concurrent, libqt5core, libqt5dbus, libqt5gui, libqt5multimedia, libqt5multimediaquick, libqt5multimediawidgets, libqt5network, libqt5opengl, libqt5printsupport, libqt5qml, libqt5qmlmodels, libqt5qmlworkerscript, libqt5quick, libqt5quick3d, libqt5quick3dassetimport, libqt5quick3drender, libqt5quick3druntimerender, libqt5quick3dutils, libqt5quickcontrols2, libqt5quickparticles, libqt5quickshapes, libqt5quicktemplates2, libqt5quicktest, libqt5quickwidgets, libqt5sql, libqt5svg, libqt5test, libqt5widgets, libqt5xml, libqt5xmlpatterns

using Fontconfig_jll
using Zlib_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"
LIBPATH_default = ""

# Relative path to `libqt53danimation`
const libqt53danimation_splitpath = ["lib", "libQt53DAnimation.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53danimation_path = ""

# libqt53danimation-specific global declaration
# This will be filled out by __init__()
libqt53danimation_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53danimation = "libQt53DAnimation.so.5"


# Relative path to `libqt53dcore`
const libqt53dcore_splitpath = ["lib", "libQt53DCore.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dcore_path = ""

# libqt53dcore-specific global declaration
# This will be filled out by __init__()
libqt53dcore_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dcore = "libQt53DCore.so.5"


# Relative path to `libqt53dextras`
const libqt53dextras_splitpath = ["lib", "libQt53DExtras.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dextras_path = ""

# libqt53dextras-specific global declaration
# This will be filled out by __init__()
libqt53dextras_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dextras = "libQt53DExtras.so.5"


# Relative path to `libqt53dinput`
const libqt53dinput_splitpath = ["lib", "libQt53DInput.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dinput_path = ""

# libqt53dinput-specific global declaration
# This will be filled out by __init__()
libqt53dinput_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dinput = "libQt53DInput.so.5"


# Relative path to `libqt53dlogic`
const libqt53dlogic_splitpath = ["lib", "libQt53DLogic.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dlogic_path = ""

# libqt53dlogic-specific global declaration
# This will be filled out by __init__()
libqt53dlogic_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dlogic = "libQt53DLogic.so.5"


# Relative path to `libqt53dquick`
const libqt53dquick_splitpath = ["lib", "libQt53DQuick.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dquick_path = ""

# libqt53dquick-specific global declaration
# This will be filled out by __init__()
libqt53dquick_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dquick = "libQt53DQuick.so.5"


# Relative path to `libqt53dquickanimation`
const libqt53dquickanimation_splitpath = ["lib", "libQt53DQuickAnimation.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dquickanimation_path = ""

# libqt53dquickanimation-specific global declaration
# This will be filled out by __init__()
libqt53dquickanimation_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dquickanimation = "libQt53DQuickAnimation.so.5"


# Relative path to `libqt53dquickextras`
const libqt53dquickextras_splitpath = ["lib", "libQt53DQuickExtras.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dquickextras_path = ""

# libqt53dquickextras-specific global declaration
# This will be filled out by __init__()
libqt53dquickextras_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dquickextras = "libQt53DQuickExtras.so.5"


# Relative path to `libqt53dquickinput`
const libqt53dquickinput_splitpath = ["lib", "libQt53DQuickInput.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dquickinput_path = ""

# libqt53dquickinput-specific global declaration
# This will be filled out by __init__()
libqt53dquickinput_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dquickinput = "libQt53DQuickInput.so.5"


# Relative path to `libqt53dquickrender`
const libqt53dquickrender_splitpath = ["lib", "libQt53DQuickRender.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dquickrender_path = ""

# libqt53dquickrender-specific global declaration
# This will be filled out by __init__()
libqt53dquickrender_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dquickrender = "libQt53DQuickRender.so.5"


# Relative path to `libqt53dquickscene2d`
const libqt53dquickscene2d_splitpath = ["lib", "libQt53DQuickScene2D.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53dquickscene2d_path = ""

# libqt53dquickscene2d-specific global declaration
# This will be filled out by __init__()
libqt53dquickscene2d_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53dquickscene2d = "libQt53DQuickScene2D.so.5"


# Relative path to `libqt53drender`
const libqt53drender_splitpath = ["lib", "libQt53DRender.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt53drender_path = ""

# libqt53drender-specific global declaration
# This will be filled out by __init__()
libqt53drender_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt53drender = "libQt53DRender.so.5"


# Relative path to `libqt5bodymovin`
const libqt5bodymovin_splitpath = ["lib", "libQt5Bodymovin.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5bodymovin_path = ""

# libqt5bodymovin-specific global declaration
# This will be filled out by __init__()
libqt5bodymovin_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5bodymovin = "libQt5Bodymovin.so.5"


# Relative path to `libqt5charts`
const libqt5charts_splitpath = ["lib", "libQt5Charts.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5charts_path = ""

# libqt5charts-specific global declaration
# This will be filled out by __init__()
libqt5charts_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5charts = "libQt5Charts.so.5"


# Relative path to `libqt5concurrent`
const libqt5concurrent_splitpath = ["lib", "libQt5Concurrent.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5concurrent_path = ""

# libqt5concurrent-specific global declaration
# This will be filled out by __init__()
libqt5concurrent_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5concurrent = "libQt5Concurrent.so.5"


# Relative path to `libqt5core`
const libqt5core_splitpath = ["lib", "libQt5Core.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5core_path = ""

# libqt5core-specific global declaration
# This will be filled out by __init__()
libqt5core_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5core = "libQt5Core.so.5"


# Relative path to `libqt5dbus`
const libqt5dbus_splitpath = ["lib", "libQt5DBus.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5dbus_path = ""

# libqt5dbus-specific global declaration
# This will be filled out by __init__()
libqt5dbus_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5dbus = "libQt5DBus.so.5"


# Relative path to `libqt5gui`
const libqt5gui_splitpath = ["lib", "libQt5Gui.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5gui_path = ""

# libqt5gui-specific global declaration
# This will be filled out by __init__()
libqt5gui_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5gui = "libQt5Gui.so.5"


# Relative path to `libqt5multimedia`
const libqt5multimedia_splitpath = ["lib", "libQt5Multimedia.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5multimedia_path = ""

# libqt5multimedia-specific global declaration
# This will be filled out by __init__()
libqt5multimedia_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5multimedia = "libQt5Multimedia.so.5"


# Relative path to `libqt5multimediaquick`
const libqt5multimediaquick_splitpath = ["lib", "libQt5MultimediaQuick.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5multimediaquick_path = ""

# libqt5multimediaquick-specific global declaration
# This will be filled out by __init__()
libqt5multimediaquick_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5multimediaquick = "libQt5MultimediaQuick.so.5"


# Relative path to `libqt5multimediawidgets`
const libqt5multimediawidgets_splitpath = ["lib", "libQt5MultimediaWidgets.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5multimediawidgets_path = ""

# libqt5multimediawidgets-specific global declaration
# This will be filled out by __init__()
libqt5multimediawidgets_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5multimediawidgets = "libQt5MultimediaWidgets.so.5"


# Relative path to `libqt5network`
const libqt5network_splitpath = ["lib", "libQt5Network.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5network_path = ""

# libqt5network-specific global declaration
# This will be filled out by __init__()
libqt5network_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5network = "libQt5Network.so.5"


# Relative path to `libqt5opengl`
const libqt5opengl_splitpath = ["lib", "libQt5OpenGL.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5opengl_path = ""

# libqt5opengl-specific global declaration
# This will be filled out by __init__()
libqt5opengl_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5opengl = "libQt5OpenGL.so.5"


# Relative path to `libqt5printsupport`
const libqt5printsupport_splitpath = ["lib", "libQt5PrintSupport.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5printsupport_path = ""

# libqt5printsupport-specific global declaration
# This will be filled out by __init__()
libqt5printsupport_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5printsupport = "libQt5PrintSupport.so.5"


# Relative path to `libqt5qml`
const libqt5qml_splitpath = ["lib", "libQt5Qml.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5qml_path = ""

# libqt5qml-specific global declaration
# This will be filled out by __init__()
libqt5qml_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5qml = "libQt5Qml.so.5"


# Relative path to `libqt5qmlmodels`
const libqt5qmlmodels_splitpath = ["lib", "libQt5QmlModels.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5qmlmodels_path = ""

# libqt5qmlmodels-specific global declaration
# This will be filled out by __init__()
libqt5qmlmodels_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5qmlmodels = "libQt5QmlModels.so.5"


# Relative path to `libqt5qmlworkerscript`
const libqt5qmlworkerscript_splitpath = ["lib", "libQt5QmlWorkerScript.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5qmlworkerscript_path = ""

# libqt5qmlworkerscript-specific global declaration
# This will be filled out by __init__()
libqt5qmlworkerscript_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5qmlworkerscript = "libQt5QmlWorkerScript.so.5"


# Relative path to `libqt5quick`
const libqt5quick_splitpath = ["lib", "libQt5Quick.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quick_path = ""

# libqt5quick-specific global declaration
# This will be filled out by __init__()
libqt5quick_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quick = "libQt5Quick.so.5"


# Relative path to `libqt5quick3d`
const libqt5quick3d_splitpath = ["lib", "libQt5Quick3D.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quick3d_path = ""

# libqt5quick3d-specific global declaration
# This will be filled out by __init__()
libqt5quick3d_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quick3d = "libQt5Quick3D.so.5"


# Relative path to `libqt5quick3dassetimport`
const libqt5quick3dassetimport_splitpath = ["lib", "libQt5Quick3DAssetImport.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quick3dassetimport_path = ""

# libqt5quick3dassetimport-specific global declaration
# This will be filled out by __init__()
libqt5quick3dassetimport_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quick3dassetimport = "libQt5Quick3DAssetImport.so.5"


# Relative path to `libqt5quick3drender`
const libqt5quick3drender_splitpath = ["lib", "libQt5Quick3DRender.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quick3drender_path = ""

# libqt5quick3drender-specific global declaration
# This will be filled out by __init__()
libqt5quick3drender_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quick3drender = "libQt5Quick3DRender.so.5"


# Relative path to `libqt5quick3druntimerender`
const libqt5quick3druntimerender_splitpath = ["lib", "libQt5Quick3DRuntimeRender.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quick3druntimerender_path = ""

# libqt5quick3druntimerender-specific global declaration
# This will be filled out by __init__()
libqt5quick3druntimerender_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quick3druntimerender = "libQt5Quick3DRuntimeRender.so.5"


# Relative path to `libqt5quick3dutils`
const libqt5quick3dutils_splitpath = ["lib", "libQt5Quick3DUtils.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quick3dutils_path = ""

# libqt5quick3dutils-specific global declaration
# This will be filled out by __init__()
libqt5quick3dutils_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quick3dutils = "libQt5Quick3DUtils.so.5"


# Relative path to `libqt5quickcontrols2`
const libqt5quickcontrols2_splitpath = ["lib", "libQt5QuickControls2.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quickcontrols2_path = ""

# libqt5quickcontrols2-specific global declaration
# This will be filled out by __init__()
libqt5quickcontrols2_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quickcontrols2 = "libQt5QuickControls2.so.5"


# Relative path to `libqt5quickparticles`
const libqt5quickparticles_splitpath = ["lib", "libQt5QuickParticles.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quickparticles_path = ""

# libqt5quickparticles-specific global declaration
# This will be filled out by __init__()
libqt5quickparticles_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quickparticles = "libQt5QuickParticles.so.5"


# Relative path to `libqt5quickshapes`
const libqt5quickshapes_splitpath = ["lib", "libQt5QuickShapes.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quickshapes_path = ""

# libqt5quickshapes-specific global declaration
# This will be filled out by __init__()
libqt5quickshapes_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quickshapes = "libQt5QuickShapes.so.5"


# Relative path to `libqt5quicktemplates2`
const libqt5quicktemplates2_splitpath = ["lib", "libQt5QuickTemplates2.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quicktemplates2_path = ""

# libqt5quicktemplates2-specific global declaration
# This will be filled out by __init__()
libqt5quicktemplates2_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quicktemplates2 = "libQt5QuickTemplates2.so.5"


# Relative path to `libqt5quicktest`
const libqt5quicktest_splitpath = ["lib", "libQt5QuickTest.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quicktest_path = ""

# libqt5quicktest-specific global declaration
# This will be filled out by __init__()
libqt5quicktest_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quicktest = "libQt5QuickTest.so.5"


# Relative path to `libqt5quickwidgets`
const libqt5quickwidgets_splitpath = ["lib", "libQt5QuickWidgets.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5quickwidgets_path = ""

# libqt5quickwidgets-specific global declaration
# This will be filled out by __init__()
libqt5quickwidgets_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5quickwidgets = "libQt5QuickWidgets.so.5"


# Relative path to `libqt5sql`
const libqt5sql_splitpath = ["lib", "libQt5Sql.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5sql_path = ""

# libqt5sql-specific global declaration
# This will be filled out by __init__()
libqt5sql_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5sql = "libQt5Sql.so.5"


# Relative path to `libqt5svg`
const libqt5svg_splitpath = ["lib", "libQt5Svg.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5svg_path = ""

# libqt5svg-specific global declaration
# This will be filled out by __init__()
libqt5svg_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5svg = "libQt5Svg.so.5"


# Relative path to `libqt5test`
const libqt5test_splitpath = ["lib", "libQt5Test.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5test_path = ""

# libqt5test-specific global declaration
# This will be filled out by __init__()
libqt5test_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5test = "libQt5Test.so.5"


# Relative path to `libqt5widgets`
const libqt5widgets_splitpath = ["lib", "libQt5Widgets.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5widgets_path = ""

# libqt5widgets-specific global declaration
# This will be filled out by __init__()
libqt5widgets_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5widgets = "libQt5Widgets.so.5"


# Relative path to `libqt5xml`
const libqt5xml_splitpath = ["lib", "libQt5Xml.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5xml_path = ""

# libqt5xml-specific global declaration
# This will be filled out by __init__()
libqt5xml_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5xml = "libQt5Xml.so.5"


# Relative path to `libqt5xmlpatterns`
const libqt5xmlpatterns_splitpath = ["lib", "libQt5XmlPatterns.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libqt5xmlpatterns_path = ""

# libqt5xmlpatterns-specific global declaration
# This will be filled out by __init__()
libqt5xmlpatterns_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libqt5xmlpatterns = "libQt5XmlPatterns.so.5"


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"Qt")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
    # then append them to our own.
    foreach(p -> append!(PATH_list, p), (Fontconfig_jll.PATH_list, Zlib_jll.PATH_list,))
    foreach(p -> append!(LIBPATH_list, p), (Fontconfig_jll.LIBPATH_list, Zlib_jll.LIBPATH_list,))

    global libqt53danimation_path = normpath(joinpath(artifact_dir, libqt53danimation_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53danimation_handle = dlopen(libqt53danimation_path)
    push!(LIBPATH_list, dirname(libqt53danimation_path))

    global libqt53dcore_path = normpath(joinpath(artifact_dir, libqt53dcore_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dcore_handle = dlopen(libqt53dcore_path)
    push!(LIBPATH_list, dirname(libqt53dcore_path))

    global libqt53dextras_path = normpath(joinpath(artifact_dir, libqt53dextras_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dextras_handle = dlopen(libqt53dextras_path)
    push!(LIBPATH_list, dirname(libqt53dextras_path))

    global libqt53dinput_path = normpath(joinpath(artifact_dir, libqt53dinput_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dinput_handle = dlopen(libqt53dinput_path)
    push!(LIBPATH_list, dirname(libqt53dinput_path))

    global libqt53dlogic_path = normpath(joinpath(artifact_dir, libqt53dlogic_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dlogic_handle = dlopen(libqt53dlogic_path)
    push!(LIBPATH_list, dirname(libqt53dlogic_path))

    global libqt53dquick_path = normpath(joinpath(artifact_dir, libqt53dquick_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dquick_handle = dlopen(libqt53dquick_path)
    push!(LIBPATH_list, dirname(libqt53dquick_path))

    global libqt53dquickanimation_path = normpath(joinpath(artifact_dir, libqt53dquickanimation_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dquickanimation_handle = dlopen(libqt53dquickanimation_path)
    push!(LIBPATH_list, dirname(libqt53dquickanimation_path))

    global libqt53dquickextras_path = normpath(joinpath(artifact_dir, libqt53dquickextras_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dquickextras_handle = dlopen(libqt53dquickextras_path)
    push!(LIBPATH_list, dirname(libqt53dquickextras_path))

    global libqt53dquickinput_path = normpath(joinpath(artifact_dir, libqt53dquickinput_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dquickinput_handle = dlopen(libqt53dquickinput_path)
    push!(LIBPATH_list, dirname(libqt53dquickinput_path))

    global libqt53dquickrender_path = normpath(joinpath(artifact_dir, libqt53dquickrender_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dquickrender_handle = dlopen(libqt53dquickrender_path)
    push!(LIBPATH_list, dirname(libqt53dquickrender_path))

    global libqt53dquickscene2d_path = normpath(joinpath(artifact_dir, libqt53dquickscene2d_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53dquickscene2d_handle = dlopen(libqt53dquickscene2d_path)
    push!(LIBPATH_list, dirname(libqt53dquickscene2d_path))

    global libqt53drender_path = normpath(joinpath(artifact_dir, libqt53drender_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt53drender_handle = dlopen(libqt53drender_path)
    push!(LIBPATH_list, dirname(libqt53drender_path))

    global libqt5bodymovin_path = normpath(joinpath(artifact_dir, libqt5bodymovin_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5bodymovin_handle = dlopen(libqt5bodymovin_path)
    push!(LIBPATH_list, dirname(libqt5bodymovin_path))

    global libqt5charts_path = normpath(joinpath(artifact_dir, libqt5charts_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5charts_handle = dlopen(libqt5charts_path)
    push!(LIBPATH_list, dirname(libqt5charts_path))

    global libqt5concurrent_path = normpath(joinpath(artifact_dir, libqt5concurrent_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5concurrent_handle = dlopen(libqt5concurrent_path)
    push!(LIBPATH_list, dirname(libqt5concurrent_path))

    global libqt5core_path = normpath(joinpath(artifact_dir, libqt5core_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5core_handle = dlopen(libqt5core_path)
    push!(LIBPATH_list, dirname(libqt5core_path))

    global libqt5dbus_path = normpath(joinpath(artifact_dir, libqt5dbus_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5dbus_handle = dlopen(libqt5dbus_path)
    push!(LIBPATH_list, dirname(libqt5dbus_path))

    global libqt5gui_path = normpath(joinpath(artifact_dir, libqt5gui_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5gui_handle = dlopen(libqt5gui_path)
    push!(LIBPATH_list, dirname(libqt5gui_path))

    global libqt5multimedia_path = normpath(joinpath(artifact_dir, libqt5multimedia_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5multimedia_handle = dlopen(libqt5multimedia_path)
    push!(LIBPATH_list, dirname(libqt5multimedia_path))

    global libqt5multimediaquick_path = normpath(joinpath(artifact_dir, libqt5multimediaquick_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5multimediaquick_handle = dlopen(libqt5multimediaquick_path)
    push!(LIBPATH_list, dirname(libqt5multimediaquick_path))

    global libqt5multimediawidgets_path = normpath(joinpath(artifact_dir, libqt5multimediawidgets_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5multimediawidgets_handle = dlopen(libqt5multimediawidgets_path)
    push!(LIBPATH_list, dirname(libqt5multimediawidgets_path))

    global libqt5network_path = normpath(joinpath(artifact_dir, libqt5network_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5network_handle = dlopen(libqt5network_path)
    push!(LIBPATH_list, dirname(libqt5network_path))

    global libqt5opengl_path = normpath(joinpath(artifact_dir, libqt5opengl_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5opengl_handle = dlopen(libqt5opengl_path)
    push!(LIBPATH_list, dirname(libqt5opengl_path))

    global libqt5printsupport_path = normpath(joinpath(artifact_dir, libqt5printsupport_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5printsupport_handle = dlopen(libqt5printsupport_path)
    push!(LIBPATH_list, dirname(libqt5printsupport_path))

    global libqt5qml_path = normpath(joinpath(artifact_dir, libqt5qml_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5qml_handle = dlopen(libqt5qml_path)
    push!(LIBPATH_list, dirname(libqt5qml_path))

    global libqt5qmlmodels_path = normpath(joinpath(artifact_dir, libqt5qmlmodels_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5qmlmodels_handle = dlopen(libqt5qmlmodels_path)
    push!(LIBPATH_list, dirname(libqt5qmlmodels_path))

    global libqt5qmlworkerscript_path = normpath(joinpath(artifact_dir, libqt5qmlworkerscript_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5qmlworkerscript_handle = dlopen(libqt5qmlworkerscript_path)
    push!(LIBPATH_list, dirname(libqt5qmlworkerscript_path))

    global libqt5quick_path = normpath(joinpath(artifact_dir, libqt5quick_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quick_handle = dlopen(libqt5quick_path)
    push!(LIBPATH_list, dirname(libqt5quick_path))

    global libqt5quick3d_path = normpath(joinpath(artifact_dir, libqt5quick3d_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quick3d_handle = dlopen(libqt5quick3d_path)
    push!(LIBPATH_list, dirname(libqt5quick3d_path))

    global libqt5quick3dassetimport_path = normpath(joinpath(artifact_dir, libqt5quick3dassetimport_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quick3dassetimport_handle = dlopen(libqt5quick3dassetimport_path)
    push!(LIBPATH_list, dirname(libqt5quick3dassetimport_path))

    global libqt5quick3drender_path = normpath(joinpath(artifact_dir, libqt5quick3drender_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quick3drender_handle = dlopen(libqt5quick3drender_path)
    push!(LIBPATH_list, dirname(libqt5quick3drender_path))

    global libqt5quick3druntimerender_path = normpath(joinpath(artifact_dir, libqt5quick3druntimerender_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quick3druntimerender_handle = dlopen(libqt5quick3druntimerender_path)
    push!(LIBPATH_list, dirname(libqt5quick3druntimerender_path))

    global libqt5quick3dutils_path = normpath(joinpath(artifact_dir, libqt5quick3dutils_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quick3dutils_handle = dlopen(libqt5quick3dutils_path)
    push!(LIBPATH_list, dirname(libqt5quick3dutils_path))

    global libqt5quickcontrols2_path = normpath(joinpath(artifact_dir, libqt5quickcontrols2_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quickcontrols2_handle = dlopen(libqt5quickcontrols2_path)
    push!(LIBPATH_list, dirname(libqt5quickcontrols2_path))

    global libqt5quickparticles_path = normpath(joinpath(artifact_dir, libqt5quickparticles_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quickparticles_handle = dlopen(libqt5quickparticles_path)
    push!(LIBPATH_list, dirname(libqt5quickparticles_path))

    global libqt5quickshapes_path = normpath(joinpath(artifact_dir, libqt5quickshapes_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quickshapes_handle = dlopen(libqt5quickshapes_path)
    push!(LIBPATH_list, dirname(libqt5quickshapes_path))

    global libqt5quicktemplates2_path = normpath(joinpath(artifact_dir, libqt5quicktemplates2_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quicktemplates2_handle = dlopen(libqt5quicktemplates2_path)
    push!(LIBPATH_list, dirname(libqt5quicktemplates2_path))

    global libqt5quicktest_path = normpath(joinpath(artifact_dir, libqt5quicktest_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quicktest_handle = dlopen(libqt5quicktest_path)
    push!(LIBPATH_list, dirname(libqt5quicktest_path))

    global libqt5quickwidgets_path = normpath(joinpath(artifact_dir, libqt5quickwidgets_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5quickwidgets_handle = dlopen(libqt5quickwidgets_path)
    push!(LIBPATH_list, dirname(libqt5quickwidgets_path))

    global libqt5sql_path = normpath(joinpath(artifact_dir, libqt5sql_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5sql_handle = dlopen(libqt5sql_path)
    push!(LIBPATH_list, dirname(libqt5sql_path))

    global libqt5svg_path = normpath(joinpath(artifact_dir, libqt5svg_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5svg_handle = dlopen(libqt5svg_path)
    push!(LIBPATH_list, dirname(libqt5svg_path))

    global libqt5test_path = normpath(joinpath(artifact_dir, libqt5test_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5test_handle = dlopen(libqt5test_path)
    push!(LIBPATH_list, dirname(libqt5test_path))

    global libqt5widgets_path = normpath(joinpath(artifact_dir, libqt5widgets_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5widgets_handle = dlopen(libqt5widgets_path)
    push!(LIBPATH_list, dirname(libqt5widgets_path))

    global libqt5xml_path = normpath(joinpath(artifact_dir, libqt5xml_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5xml_handle = dlopen(libqt5xml_path)
    push!(LIBPATH_list, dirname(libqt5xml_path))

    global libqt5xmlpatterns_path = normpath(joinpath(artifact_dir, libqt5xmlpatterns_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libqt5xmlpatterns_handle = dlopen(libqt5xmlpatterns_path)
    push!(LIBPATH_list, dirname(libqt5xmlpatterns_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(vcat(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)]), ':')

    
end  # __init__()

